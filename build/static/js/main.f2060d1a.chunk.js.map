{"version":3,"sources":["components/Loading/Loader.js","components/Loading/index.js","reducers/user.js","reducers/index.js","store/configureStore.js","components/ScrollToTop/index.js","components/App.js","components/Root.js","serviceWorker.js","index.js"],"names":["Loading_Loader","react_default","a","createElement","class","role","__webpack_exports__","props","error","className","pastDelay","reducers_user","state","arguments","length","undefined","action","type","_objectSpread","user","reducers","Object","redux","routing","react_router_redux_es","configureStore_history","history_es","store_configureStore","initialState","reactRouterMiddleware","middlewares","es","applyMiddleware","ScrollToTop","prevProps","this","location","window","scrollTo","children","Component","components_ScrollToTop","react_router_es","AsyncAppLayout","lib_default","loader","Promise","all","__webpack_require__","e","then","bind","loading","Loading","AsyncAccount","components_App","pathname","Redirect","to","id","Route","path","component","Root_Root","_this$props","store","history","react_redux_es","react","Boolean","hostname","match","src_store","react_dom","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6GAQAA,EANe,kBACbC,EAAAC,EAAAC,cAAA,OAAKC,MAAM,iBAAiBC,KAAK,UAC/BJ,EAAAC,EAAAC,cAAA,QAAMC,MAAM,WAAZ,gBCSJE,EAAA,EAVA,SAAiBC,GACf,OAAIA,EAAMC,MACDP,EAAAC,EAAAC,cAAA,OAAKM,UAAU,oBAAf,kCACEF,EAAMG,UACRT,EAAAC,EAAAC,cAAA,OAAKM,UAAU,oBAAf,IAAmCR,EAAAC,EAAAC,cAACH,EAAD,MAAnC,KAEA,4PCTX,IAcAW,EAZa,WAAkC,IAAjCC,EAAiCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAF1B,KAEeG,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC7C,OAAQC,EAAOC,MACb,IAAK,WACH,0UAAAC,IACKN,EACAI,EAAOG,MAEd,QACE,OAAOP,ICDbQ,EALoBC,OAAAC,EAAA,EAAAD,EAClBF,KAAMR,EACNY,QAASC,EAAA,ICCEC,EAAUJ,OAAAK,EAAA,EAAAL,GAyCvB,IAEAM,EA1CA,SAA4BC,GAC1B,IAAMC,EAAwBR,OAAAG,EAAA,EAAAH,CAAiBI,GACzCK,GAKJC,EAAA,EACAF,GAGF,OAAOR,OAAAC,EAAA,EAAAD,CAAYD,EAAaQ,EAAcP,OAAAC,EAAA,EAAAD,CAC5CC,EAAA,EAAAU,aAAmBF,6xBCjBjBG,4OACeC,GACbC,KAAK5B,MAAM6B,WAAaF,EAAUE,UACpCC,OAAOC,SAAS,EAAG,oCAKrB,OAAOH,KAAK5B,MAAMgC,qNARItC,EAAAC,EAAMsC,WAYhCC,EAAepB,OAAAqB,EAAA,EAAf,CAA0BT,syBCT1B,IAAIU,EAAiBC,KACnBC,OAAQ,kBAAMC,QAAAC,KAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,WACdC,QAASC,EAAA,IAGPC,EAAeV,KACjBC,OAAQ,kBAAMC,QAAAC,KAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,WACdC,QAASC,EAAA,IAoBXE,kOAbI,MADqC,MADhBpB,KAAK5B,MAAlB6B,SACgBoB,SAEbvD,EAAAC,EAAAC,cAACsD,EAAA,GAASC,GAAI,WAIvBzD,EAAAC,EAAAC,cAAA,OAAKwD,GAAG,OACN1D,EAAAC,EAAAC,cAACyD,EAAA,GAAMC,KAAA,SAAgBC,UAAWR,IAClCrD,EAAAC,EAAAC,cAACyD,EAAA,GAAMC,KAAA,OAAcC,UAAWnB,iNAXtB1C,EAAAC,EAAMsC,2wBCRHuB,kOAER,IAAAC,EACsB7B,KAAK5B,MAAxB0D,EADHD,EACGC,MAAOC,EADVF,EACUE,QACf,OACEjE,EAAAC,EAAAC,cAACgE,EAAA,GAASF,MAAOA,GACfhE,EAAAC,EAAAC,cAACqB,EAAA,GAAgB0C,QAASA,GACxBjE,EAAAC,EAAAC,cAACsC,EAAD,KACExC,EAAAC,EAAAC,cAACyD,EAAA,GAAMC,KAAK,IAAIC,UAAWP,mNARTa,EAAA,WCEdC,QACW,cAA7BhC,OAAOD,SAASkC,UAEe,UAA7BjC,OAAOD,SAASkC,UAEhBjC,OAAOD,SAASkC,SAASC,MACvB,2DCXN,IAAMC,EAAQ7C,IAEdN,OAAAoD,EAAA,OAAApD,CACEpB,EAAAC,EAAAC,cAAC4D,GAAKE,MAAOO,EAAON,QAASzC,IAC7BiD,SAASC,eAAe,SDgHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC","file":"static/js/main.f2060d1a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Loader = () => (\r\n  <div class=\"spinner-border\" role=\"status\">\r\n    <span class=\"sr-only\">Loading...</span>\r\n  </div>\r\n)\r\n\r\nexport default Loader;\r\n","import React from 'react';\r\nimport Loader from './Loader';\r\n\r\nfunction Loading(props) {\r\n  if (props.error) {\r\n    return <div className=\"loader-container\">Error! Please refresh the page</div>;\r\n  } else if (props.pastDelay) {\r\n    return <div className=\"loader-container\"> <Loader /> </div>;\r\n  } else {\r\n    return null; // Avoiding Flash Of Loading Component (<200ms)\r\n  }\r\n}\r\n\r\nexport default Loading;","const initialState = null;\r\n\r\nconst user = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"SET_USER\":\r\n      return {\r\n        ...state,\r\n        ...action.user\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default user;\r\n","import { combineReducers } from 'redux';\r\nimport { routerReducer } from 'react-router-redux';\r\nimport user from './user';\r\n\r\nconst rootReducer = combineReducers({\r\n  user: user,\r\n  routing: routerReducer\r\n});\r\n\r\nexport default rootReducer;\r\n","import {createStore, compose, applyMiddleware} from 'redux';\r\nimport reduxImmutableStateInvariant from 'redux-immutable-state-invariant';\r\nimport thunk from 'redux-thunk';\r\nimport { createBrowserHistory } from 'history';\r\n// 'routerMiddleware': the new way of storing route changes with redux middleware since rrV4.\r\nimport { routerMiddleware } from 'react-router-redux';\r\nimport rootReducer from '../reducers';\r\nexport const history = createBrowserHistory();\r\nfunction configureStoreProd(initialState) {\r\n  const reactRouterMiddleware = routerMiddleware(history);\r\n  const middlewares = [\r\n    // Add other middleware on this line...\r\n\r\n    // thunk middleware can also accept an extra argument to be passed to each thunk action\r\n    // https://github.com/gaearon/redux-thunk#injecting-a-custom-argument\r\n    thunk,\r\n    reactRouterMiddleware,\r\n  ];\r\n\r\n  return createStore(rootReducer, initialState, compose(\r\n    applyMiddleware(...middlewares)\r\n    )\r\n  );\r\n}\r\n\r\nfunction configureStoreDev(initialState) {\r\n  const reactRouterMiddleware = routerMiddleware(history);\r\n  const middlewares = [\r\n    // Add other middleware on this line...\r\n\r\n    // Redux middleware that spits an error on you when you try to mutate your state either inside a dispatch or between dispatches.\r\n    reduxImmutableStateInvariant(),\r\n\r\n    // thunk middleware can also accept an extra argument to be passed to each thunk action\r\n    // https://github.com/gaearon/redux-thunk#injecting-a-custom-argument\r\n    thunk,\r\n    reactRouterMiddleware,\r\n  ];\r\n\r\n  const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose; // add support for Redux dev tools\r\n  const store = createStore(rootReducer, initialState, composeEnhancers(\r\n    applyMiddleware(...middlewares)\r\n    )\r\n  );\r\n\r\n  return store;\r\n}\r\n\r\nconst configureStore = process.env.NODE_ENV === 'production' ? configureStoreProd : configureStoreDev;\r\n\r\nexport default configureStore;\r\n","import React from 'react';\r\nimport { withRouter } from 'react-router';\r\n\r\nclass ScrollToTop extends React.Component {\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.location !== prevProps.location) {\r\n      window.scrollTo(0, 0)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return this.props.children\r\n  }\r\n}\r\n\r\nexport default withRouter(ScrollToTop);","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport loadable from 'react-loadable';\r\nimport LoadingComponent from '../components/Loading';\r\nimport './styles.scss';\r\n\r\nlet AsyncAppLayout = loadable({\r\n  loader: () => import('components/Layout/AppLayout/'),\r\n  loading: LoadingComponent\r\n})\r\n\r\nlet AsyncAccount = loadable({\r\n  loader: () => import('../routes/login'),\r\n  loading: LoadingComponent\r\n})\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    const { location } = this.props;\r\n    const isRoot = location.pathname === '/' ? true : false;\r\n    if (isRoot) {\r\n      return ( <Redirect to={'/login'}/> );\r\n    }\r\n\r\n    return (\r\n      <div id=\"app\">\r\n        <Route path={`/login`} component={AsyncAccount} />\r\n        <Route path={`/app`} component={AsyncAppLayout} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { ConnectedRouter } from 'react-router-redux';\r\nimport { Provider } from 'react-redux';\r\nimport { Route } from 'react-router-dom';\r\nimport ScrollToTop from 'components/ScrollToTop';\r\nimport App from './App';\r\n\r\nexport default class Root extends Component {\r\n    \r\n    render() {\r\n        const { store, history } = this.props;\r\n        return (\r\n          <Provider store={store}>\r\n            <ConnectedRouter history={history} >\r\n              <ScrollToTop>\r\n                <Route path=\"/\" component={App} />\r\n              </ScrollToTop>\r\n            </ConnectedRouter>\r\n          </Provider>\r\n        );\r\n    }\r\n}\r\n\r\nRoot.propTypes = {\r\n  store: PropTypes.object.isRequired,\r\n  history: PropTypes.object.isRequired\r\n};\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { render } from 'react-dom';\r\nimport configureStore, { history } from './store/configureStore';\r\nimport Root from './components/Root';\r\nimport * as serviceWorker from './serviceWorker';\r\nconst store = configureStore();\r\n\r\nrender(\r\n  <Root store={store} history={history} />,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}